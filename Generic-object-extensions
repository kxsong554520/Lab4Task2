//1. declaring enum class and display data class 

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

//add enum class
enum class Difficulty {
    EASY, MEDIUM, HARD
}
  
//create singleton object 
object StudentProgress {
    var total: Int = 10
    var answered: Int = 3
	}

fun main() {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)
    println(question1.toString())
    println("${StudentProgress.answered} of ${StudentProgress.total} answered.")
}


//2. declare companion object and displaying them

data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

enum class Difficulty {
    EASY, MEDIUM, HARD
}
  
class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
        var total: Int = 10
        var answered: Int = 3
    }
}

fun main() {
    println("${Quiz.answered} of ${Quiz.total} answered.")
}

//3. Add an extension property and extension function
data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

//add enum class
enum class Difficulty {
    EASY, MEDIUM, HARD
}
  
class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
        var total: Int = 10
        var answered: Int = 3
    }
}

//extension property
val Quiz.StudentProgress.progressText: String
	get() = "${answered} of ${total} answered"

//extension function
fun Quiz.StudentProgress.printProgressBar() {
    repeat(Quiz.answered) { print("▓") }
    repeat(Quiz.total - Quiz.answered) { print("▒") }
    println()
    println(Quiz.progressText)
}


fun main() {
    println(Quiz.printProgressBar())
}

// 4. Rewrite extension functions using interfaces
data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

//add enum class
enum class Difficulty {
    EASY, MEDIUM, HARD
}

interface ProgressPrintable {
    val progressText: String
    fun printProgressBar()
}
  
class Quiz: ProgressPrintable {
    override val progressText: String
        get() = "${answered} of ${total} answered"
    
    override fun printProgressBar() {
    	repeat(Quiz.answered) { print("▓") }
    	repeat(Quiz.total - Quiz.answered) { print("▒") }
   		println()
    	println(progressText)
}
    
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
        var total: Int = 10
        var answered: Int = 3
    }
}

fun main() {
    Quiz().printProgressBar()
}


// 5.Replace long object name using let{}
data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

//add enum class
enum class Difficulty {
    EASY, MEDIUM, HARD
}

interface ProgressPrintable {
    val progressText: String
    fun printProgressBar()
}
  
class Quiz: ProgressPrintable {
    override val progressText: String
        get() = "${answered} of ${total} answered"
    
    override fun printProgressBar() {
    	repeat(Quiz.answered) { print("▓") }
    	repeat(Quiz.total - Quiz.answered) { print("▒") }
   		println()
    	println(progressText)
	}
    
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)
    
    fun printQuiz() {
        question1.let{
    		println(question1.questionText)
   			println(question1.answer)
    		println(question1.difficulty)
        }
    	println()
        question2.let{
    		println(question2.questionText)
    		println(question2.answer)
    		println(question2.difficulty)
        }
    	println()
        question3.let{
    		println(question3.questionText)
    		println(question3.answer)
    		println(question3.difficulty)
        }
    	println()
	}
    

    companion object StudentProgress {
        var total: Int = 10
        var answered: Int = 3
    }
}

fun main() {
    val quiz = Quiz()
    quiz.printQuiz()
}

//6.call object methods without variable using apply{}

//rest of code is same as in 5., just change the main() class
fun main() {
    Quiz().apply{
    printQuiz()
    }
}
